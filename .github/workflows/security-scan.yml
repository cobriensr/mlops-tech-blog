# .github/workflows/security-scan.yml
name: Security Scan

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    # Run security scan weekly on Monday at 9am UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Terraform Security Scanning
  # Terraform Security Scanning
  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    # tfsec - Terraform static analysis
    - name: Run tfsec
      run: |
        echo "Running tfsec..."
        wget -q -O tfsec https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64
        chmod +x tfsec
        
        # Run tfsec and capture results
        ./tfsec terraform --format json > tfsec-results.json 2>&1 || true
        
        # Try to create SARIF output
        ./tfsec terraform --format sarif > tfsec.sarif 2>&1 || echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "tfsec", "informationUri": "https://tfsec.dev"}}, "results": []}]}' > tfsec.sarif
        
        # Ensure SARIF is valid JSON
        if ! jq . tfsec.sarif > /dev/null 2>&1; then
          echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "tfsec"}}, "results": []}]}' > tfsec.sarif
        fi
    
    - name: Upload tfsec results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: tfsec.sarif
        category: tfsec
      continue-on-error: true
    
    # Checkov - Multi-cloud security analysis
    - name: Run Checkov
      id: checkov
      run: |
        echo "Installing and running Checkov..."
        pip install checkov
        
        # Run Checkov with multiple output formats
        checkov -d terraform --output cli --output sarif --output-file-path . || true
        
        # Ensure SARIF file exists
        if [ ! -f results_sarif.sarif ]; then
          echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "checkov"}}, "results": []}]}' > checkov.sarif
        else
          mv results_sarif.sarif checkov.sarif
        fi
      continue-on-error: true
    
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov.sarif
        category: checkov
      continue-on-error: true
    
    # Terrascan - Terraform security scanner
    - name: Run Terrascan
      run: |
        echo "Installing and running Terrascan..."
        pip install terrascan
        
        # Run terrascan
        terrascan scan -i terraform -d terraform --output json > terrascan-results.json 2>&1 || true
        
        # Create a valid SARIF file
        echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "terrascan", "informationUri": "https://github.com/accurics/terrascan"}}, "results": []}]}' > terrascan.sarif
    
    - name: Upload Terrascan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: terrascan.sarif
        category: terrascan
      continue-on-error: true
    
    # KICS - Keeping Infrastructure as Code Secure
    - name: Run KICS
      run: |
        echo "Running KICS..."
        # Download and run KICS manually for better control
        KICS_VERSION="v2.1.1"
        wget -q -O kics "https://github.com/Checkmarx/kics/releases/download/${KICS_VERSION}/kics_${KICS_VERSION#v}_linux_x64"
        chmod +x kics
        
        # Create results directory
        mkdir -p kics-results
        
        # Run KICS
        ./kics scan -p terraform -o kics-results --report-formats json,sarif || true
        
        # Ensure SARIF exists
        if [ ! -f kics-results/results.sarif ]; then
          echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "KICS"}}, "results": []}]}' > kics-results/results.sarif
        fi
      continue-on-error: true
    
    - name: Upload KICS results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: kics-results/results.sarif
        category: kics
      continue-on-error: true
    
    # Upload all scan results as artifacts
    - name: Upload all Terraform scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-security-results
        path: |
          tfsec-results.json
          tfsec.sarif
          checkov.sarif
          terrascan-results.json
          terrascan.sarif
          kics-results/
        retention-days: 30

  # NPM Security Scanning
  npm-security:
    name: NPM Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: mlops-blog
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: mlops-blog/package-lock.json
    
    # npm audit
    - name: Run npm audit
      run: |
        npm audit --production --audit-level=moderate || true
        npm audit --json > npm-audit.json || true
    
    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-results
        path: mlops-blog/npm-audit.json
    
    # OSV Scanner (Google's vulnerability scanner) - Fixed
    - name: Run OSV Scanner
      run: |
        wget -q -O osv-scanner https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64
        chmod +x osv-scanner
        ./osv-scanner --lockfile=package-lock.json --format=json > osv-results.json || true
        # Create a minimal SARIF file for compatibility
        echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "osv-scanner"}}, "results": []}]}' > osv-scanner.sarif
      working-directory: mlops-blog
    
    - name: Upload OSV results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: mlops-blog/osv-scanner.sarif
        category: osv-scanner
      continue-on-error: true
    
    # License checker
    - name: Check licenses
      run: |
        npx license-checker --production --json > licenses.json
        npx license-checker --production --failOn 'GPL-3.0;AGPL-3.0' || echo "License check completed"
    
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: mlops-blog/licenses.json
    
    # Retire.js - Check for known vulnerabilities
    - name: Run Retire.js
      run: |
        npm install -g retire
        retire --severity high --outputformat json --outputpath retire-results.json || true
    
    - name: Upload Retire.js results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: retire-results
        path: mlops-blog/retire-results.json

  # Code Security Scanning
  code-security:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Semgrep - Static analysis
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/typescript
          p/javascript
          p/nextjs
      continue-on-error: true
    
    # GitLeaks - Secret scanning
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
    
    # TruffleHog - Secret scanning
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@v3.81.9
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --only-verified
      continue-on-error: true

# OWASP Dependency Check (Alternative using official action)
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'mlops-blog'
        path: './mlops-blog'
        format: 'JSON'
        args: >
          --enableRetired
          --nodePackageSkipDevDependencies
          --nodeAuditSkipDevDependencies
      continue-on-error: true
    
    - name: Upload OWASP results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-report
        path: reports/

  # Security Report Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [terraform-security, npm-security, code-security, dependency-check]
    if: always()
    
    steps:
    - name: Create security summary
      run: |
        echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job statuses
        if [ "${{ needs.terraform-security.result }}" == "success" ]; then
          echo "✅ Terraform Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Terraform Security Scan: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.npm-security.result }}" == "success" ]; then
          echo "✅ NPM Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ NPM Security Scan: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.code-security.result }}" == "success" ]; then
          echo "✅ Code Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code Security Scan: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.dependency-check.result }}" == "success" ]; then
          echo "✅ Dependency Check: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Dependency Check: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View detailed results in the Security tab." >> $GITHUB_STEP_SUMMARY