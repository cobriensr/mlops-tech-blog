# .github/workflows/security-scan.yml
name: Security Scan

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    # Run security scan weekly on Monday at 9am UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Terraform Security Scanning
  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Check if Terraform directory exists
      id: check_terraform
      run: |
        # Check for terraform directory - adjust path as needed
        if [ -d "terraform" ]; then
          echo "terraform_exists=true" >> $GITHUB_OUTPUT
          echo "terraform_dir=terraform" >> $GITHUB_OUTPUT
          echo "Found Terraform directory at: terraform"
        elif [ -d "mlops-blog/terraform" ]; then
          echo "terraform_exists=true" >> $GITHUB_OUTPUT
          echo "terraform_dir=mlops-blog/terraform" >> $GITHUB_OUTPUT
          echo "Found Terraform directory at: mlops-blog/terraform"
        elif [ -d "infrastructure" ]; then
          echo "terraform_exists=true" >> $GITHUB_OUTPUT
          echo "terraform_dir=infrastructure" >> $GITHUB_OUTPUT
          echo "Found Terraform directory at: infrastructure"
        else
          echo "terraform_exists=false" >> $GITHUB_OUTPUT
          echo "No Terraform directory found"
          echo "Checked: terraform, mlops-blog/terraform, infrastructure"
          ls -la
        fi
    
    - name: Setup Python
      if: steps.check_terraform.outputs.terraform_exists == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    # Run Trivy for comprehensive IaC scanning
    - name: Run Trivy on Terraform
      if: steps.check_terraform.outputs.terraform_exists == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '${{ steps.check_terraform.outputs.terraform_dir }}'
        format: 'sarif'
        output: 'trivy-terraform.sarif'
        severity: 'CRITICAL,HIGH'
        hide-progress: true
      continue-on-error: true
    
    - name: Upload Trivy results to GitHub Security
      if: steps.check_terraform.outputs.terraform_exists == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-terraform.sarif
        category: trivy-terraform
      continue-on-error: true
    
    # Checkov - Multi-cloud security analysis
    - name: Run Checkov
      if: steps.check_terraform.outputs.terraform_exists == 'true'
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: ${{ steps.check_terraform.outputs.terraform_dir }}
        quiet: true
        soft_fail: true
        framework: terraform
        output_format: sarif
        output_file_path: checkov.sarif
        download_external_modules: true
      continue-on-error: true
    
    - name: Upload Checkov results to GitHub Security
      if: steps.check_terraform.outputs.terraform_exists == 'true' && always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov.sarif
        category: checkov
      continue-on-error: true

  # NPM Security Scanning
  npm-security:
    name: NPM Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: mlops-blog/package-lock.json
    
    # Use built-in npm audit
    - name: Run npm audit
      working-directory: mlops-blog
      run: |
        echo "## 📦 NPM Security Scan" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for vulnerabilities
        echo "### Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        npm audit --production || true
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Report status
        if npm audit --production --audit-level=high; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status**: No high or critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Status**: Vulnerabilities detected - review needed" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true
    
    # Use Trivy for comprehensive scanning
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'mlops-blog'
        format: 'sarif'
        output: 'trivy-npm.sarif'
        severity: 'CRITICAL,HIGH'
        skip-dirs: 'node_modules,.next,out'
      continue-on-error: true
    
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-npm.sarif
        category: trivy-npm
      continue-on-error: true

  # Code Security Scanning
  code-security:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for better scanning
    
    # Semgrep - Static analysis
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/typescript
          p/javascript
          p/nextjs
          p/secrets
      continue-on-error: true
    
    # Simple secret detection with built-in git
    - name: Check for secrets with git
      run: |
        echo "## 🔐 Secret Detection" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for common secret patterns
        if git grep -iE "(api[_-]?key|api[_-]?secret|access[_-]?key|private[_-]?key|secret[_-]?key)" -- ':!*.md' ':!*.lock' ':!*.json' ':!.github/*' 2>/dev/null; then
          echo "⚠️ **Warning**: Potential secrets detected in code" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **Status**: No obvious secrets detected" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true

  # Security Report Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [terraform-security, npm-security, code-security]
    if: always()
    
    steps:
    - name: Create security summary
      run: |
        echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job statuses
        if [ "${{ needs.terraform-security.result }}" == "success" ]; then
          echo "✅ **Terraform Security**: Passed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.terraform-security.result }}" == "skipped" ]; then
          echo "⏭️ **Terraform Security**: Skipped (no Terraform files)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Terraform Security**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.npm-security.result }}" == "success" ]; then
          echo "✅ **NPM Security**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **NPM Security**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.code-security.result }}" == "success" ]; then
          echo "✅ **Code Security**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Code Security**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 View detailed results in:" >> $GITHUB_STEP_SUMMARY
        echo "- [Security tab](../../security) for vulnerability details" >> $GITHUB_STEP_SUMMARY
        echo "- [Code scanning alerts](../../security/code-scanning) for code issues" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "_Scans run on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")_" >> $GITHUB_STEP_SUMMARY